[{"path":"https://fbellelli.github.io/Countries/articles/dealing_with_names.html","id":"identifying-country-names","dir":"Articles","previous_headings":"","what":"Identifying country names","title":"Dealing with country names","text":"function is_country() allows check whether string country name. argument fuzzy_margin can used increase tolerance allow small typos names. instance, value 0.1 allows 10% characters strings wrong. Furthermore, is_country() can also used check specific subset countries. following example, function used test whether string relates India Sri Lanka, allowing different naming conventions languages. Finally, package also provides function , can used find columns data frame contain country names.","code":"is_country(c(\"United States\",\"Unated States\",\"pot\",\"DNK\",123), fuzzy_margin = 0) #> [1]  TRUE FALSE FALSE  TRUE FALSE is_country(c(\"United States\",\"Unated States\",\"pot\",\"DNK\",123), fuzzy_margin = 0.1) #> [1]  TRUE  TRUE FALSE  TRUE FALSE is_country(x=c(\"Ceylon\",\"LKA\",\"Indonesia\",\"Inde\"), check_for=c(\"India\",\"Sri Lanka\")) #> [1]  TRUE  TRUE FALSE  TRUE"},{"path":"https://fbellelli.github.io/Countries/articles/dealing_with_names.html","id":"converting-and-translating-country-names","dir":"Articles","previous_headings":"","what":"Converting and translating country names","title":"Dealing with country names","text":"function country_name() can used convert country names different naming conventions translate different languages. multiple arguments passed argument , function output data.frame object, one column corresponding every naming convention. argument supports following naming conventions:","code":"example <- c(\"United States\",\"DR Congo\", \"Morocco\")  # Getting 3-letters ISO code country_name(x= example, to=\"ISO3\") #> [1] \"USA\" \"COD\" \"MAR\"  # Translating to Spanish country_name(x= example, to=\"name_es\") #> [1] \"Estados Unidos\"                  \"República Democrática del Congo\" #> [3] \"Marruecos\" # Requesting 2-letter ISO codes and translation to Spanish and French country_name(x= example, to=c(\"ISO2\",\"name_es\",\"name_fr\")) #>   ISO2                         name_es                          name_fr #> 1   US                  Estados Unidos                       États-Unis #> 2   CD República Democrática del Congo République démocratique du Congo #> 3   MA                       Marruecos                            Maroc"},{"path":"https://fbellelli.github.io/Countries/articles/dealing_with_names.html","id":"further-options-and-warning-messages","dir":"Articles","previous_headings":"Converting and translating country names","what":"Further options and warning messages","title":"Dealing with country names","text":"country_name() can identify countries even provided mixed formats different languages. robust small misspellings recognises many alternative country names old nomenclatures. information country matching process can obtained setting verbose=TRUE. function print information : number unique values provided user. example 6 distinct strings provided. many country names correspond exactly ones function’s reference list many recognised fuzzy matching. example , \"C@ète d^Ivoire\" name recognised fuzzy matching. function’s reference table can accessed command data(country_reference_list). function prints summary statistics fuzzy matching. DISTANCE metric refers number insertions, deletions substitutions necessary go provided string (\"C@ète d^Ivoire\") closest reference (\"Côte d'Ivoire\"). Lower DISTANCE statistics indicate reliable fuzzy matching. addition, setting verbose=TRUE also print additional informations relating specific warnings normally given function: Multiple country IDs matched country name: warning issued multiple strings matched country. verbose mode, strings corresponding countries listed. example , \"US\" \"Estados Unidos\" matched country. vector country names unique identifier, indicate country name recognised correctly. user might consider using custom tables (refer next section). country IDs match one country naming conventions: indicates impossible find exact match one country names fuzzy_match=TRUE. user might consider using fuzzy_match=TRUE custom tables (refer next section). low confidence matching country names: warning indicates strings matched poorly. Thus indicating country might mididentified. verbose mode function provide list problematic strings (see example ). user might consider using custom tables solve type issues (refer next section). country IDs match one country naming conventions: Conversion requested nomenclature information country. instance, example “Taiwan” correspondence UN M49 standard. verbose mode, function print country names affected problem. user might consider using custom tables solve type issues (refer next section). information verbose mode can accessed setting ´simplify=FALSE´. return list object containing: ´converted_data´: normal output function ´match_table´: conversion table information closest match country name distance metrics. ´summary´: summary values distance metrics ´warning´: logical value indicating whether warning issued function ´call´: arguments passed user","code":"fuzzy_example <- c(\"US\",\"C@ète d^Ivoire\",\"Zaire\",\"FYROM\",\"Estados Unidos\",\"ITA\")  country_name(x= fuzzy_example, to=c(\"UN_en\")) #> Multiple country IDs have been matched to the same country name #> Set - verbose - to TRUE for more details #> [1] \"United States of America\"         \"Côte d’Ivoire\"                    #> [3] \"Democratic Republic of the Congo\" \"North Macedonia\"                  #> [5] \"United States of America\"         \"Italy\" country_name(x= fuzzy_example, to=c(\"UN_en\"), verbose=TRUE) #>  #> In total 6 unique country identifiers have been found #> 5/6 have been matched with EXACT matching #> 1/6 have been matched with FUZZY matching #>  #> Fuzzy matching DISTANCE summary: #>  | Average:  3 #>  | Min: 3  #>  | Q1: 3  #>  | Median: 3  #>  | Q3: 3  #>  | Max: 3 #>  #> Multiple arguments have been matched to the same country name: #>   - Estados Unidos : United States of America  #>   - US : United States of America #> [1] \"United States of America\"         \"Côte d’Ivoire\"                    #> [3] \"Democratic Republic of the Congo\" \"North Macedonia\"                  #> [5] \"United States of America\"         \"Italy\" country_name(x= c(\"Taiwan\",\"lsajdèd\"), to=c(\"UN_en\"), verbose=FALSE) #> Some country IDs have no match in one or more country naming conventions #> There is low confidence on the matching of some country names #> Set - verbose - to TRUE for more details #> [1] NA                                 \"Lao People's Democratic Republic\""},{"path":"https://fbellelli.github.io/Countries/articles/dealing_with_names.html","id":"using-custom-conversion-tables","dir":"Articles","previous_headings":"","what":"Using custom conversion tables","title":"Dealing with country names","text":"cases, user might unhappy naming conversion valid conversion might exist provided territory. cases, might useful tweak conversion table. package contains utility function called ´match_table()´, can used generate conversion tables small adjustments.","code":"example_custom <- c(\"Siam\",\"Burma\",\"H#@°)Koe2\")  #suppose we are unhappy with how \"H#@°)Koe2\" is interpreted by the function country_name(x = example_custom, to = \"name_en\") #> There is low confidence on the matching of some country names #> Set - verbose - to TRUE for more details #> [1] \"Thailand\"           \"Myanmar\"            \"Korea, Republic of\"  #match_table can be used to generate a table for small adjustments tab <- match_table(x = example_custom, to = \"name_en\") #> There is low confidence on the matching of some country names tab$name_en[2] <- \"Hong Kong\"  #which can then be used for conversion country_name(x = example_custom, to = \"name_en\", custom_table = tab) #> [1] \"Thailand\"  \"Myanmar\"   \"Hong Kong\""},{"path":"https://fbellelli.github.io/Countries/articles/package_intro.html","id":"installing-and-loading-the-package","dir":"Articles","previous_headings":"","what":"Installing and loading the package","title":"Getting started","text":"Since package yet CRAN, needs downloaded directly Github repository. can done devtools package.","code":"# Install and load devtools install.packages(\"devtools\") library(devtools)  # Install and load Countries package devtools::install_github(\"fbellelli/countries\", build_vignettes = TRUE) library(Countries)"},{"path":"https://fbellelli.github.io/Countries/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Francesco Saverio Bellelli. Author, maintainer.            https://fbellelli.com/","code":""},{"path":"https://fbellelli.github.io/Countries/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Bellelli F (2022). Countries: package deal country data quick easy way. https://fbellelli.github.io/Countries/, https://github.com/fbellelli/Countries.","code":"@Manual{,   title = {Countries: A package to deal with country data in a quick and easy way},   author = {Francesco Saverio Bellelli},   year = {2022},   note = {https://fbellelli.github.io/Countries/, https://github.com/fbellelli/Countries}, }"},{"path":"https://fbellelli.github.io/Countries/index.html","id":"countries","dir":"","previous_headings":"","what":"A package to deal with country data in a quick and easy way","title":"A package to deal with country data in a quick and easy way","text":"´Countries´ R package designed quickly wrangle, merge explore country data. package contains functions easily identify convert country names, pull country info datasets, merge country data different sources, make quick world maps.","code":""},{"path":"https://fbellelli.github.io/Countries/index.html","id":"installing-and-loading-the-package","dir":"","previous_headings":"","what":"Installing and loading the package","title":"A package to deal with country data in a quick and easy way","text":"Since package yet CRAN, development version needs downloaded directly Github repository. can done devtools package. package can loaded normally","code":"# Install and load devtools install.packages(\"devtools\") library(devtools)  # Install Countries devtools::install_github(\"fbellelli/countries\", build_vignettes = TRUE) library(Countries)"},{"path":"https://fbellelli.github.io/Countries/index.html","id":"dealing-with-country-names","dir":"","previous_headings":"","what":"Dealing with country names","title":"A package to deal with country data in a quick and easy way","text":"package contains several functions work country names. instance, function is_country can used test country names subsets countries: function country_name() can used convert country names different naming conventions translate different languages. country_name() can identify countries even provided mixed formats different languages. robust small misspellings recognises many alternative country names old nomenclatures. Learn country names functions article.","code":"#Detect strings that are country names is_country(x=c(\"ITA\",\"Estados Unidos\",\"bungalow\",\"dog\",542)) #> [1]  TRUE  TRUE FALSE FALSE FALSE  #Checking for a specific subset of countries is_country(x=c(\"Ceylon\",\"LKA\",\"Indonesia\",\"Inde\"), check_for=c(\"India\",\"Sri Lanka\")) #> [1]  TRUE  TRUE FALSE  TRUE example <- c(\"US\",\"C@ète d^Ivoire\", \"Morocco\",\"FYROM\", \"Arabie Saoudite\")  # Getting 3-letters ISO code country_name(x= example, to=\"ISO3\") #> [1] \"USA\" \"CIV\" \"MAR\" \"MKD\" \"SAU\"  # Translating to spanish country_name(x= example, to=\"name_es\") #> [1] \"Estados Unidos\"      \"Costa de Marfil\"     \"Marruecos\"           #> [4] \"Macedonia del Norte\" \"Arabia Saudita\"  # Getting multiple nomenclatures country_name(x= example, to=c(\"ISO3\",\"ISO2\",\"UN_en\")) #>   ISO3 ISO2                    UN_en #> 1  USA   US United States of America #> 2  CIV   CI            Côte d’Ivoire #> 3  MAR   MA                  Morocco #> 4  MKD   MK          North Macedonia #> 5  SAU   SA             Saudi Arabia"},{"path":"https://fbellelli.github.io/Countries/index.html","id":"work-in-progress","dir":"","previous_headings":"","what":"Work in progress:","title":"A package to deal with country data in a quick and easy way","text":"function downloading --date information countries (e.g. currency, language, population, etc.) function downloading country data analysis different sources (e.g. UN, World Bank, FRED, etc.) function quickly merge country data different sources function tag countries based common criteria (e.g. developing status, World bank income group, geographic region, etc.) function easily plot chloropleth maps publish CRAN","code":""},{"path":"https://fbellelli.github.io/Countries/reference/country_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert and translate country names — country_name","title":"Convert and translate country names — country_name","text":"function recognises converts country names different nomenclatures languages using fuzzy matching algorithm. country_name() can identify countries even provided mixed formats different languages. robust small misspellings recognises many alternative country names old nomenclatures.","code":""},{"path":"https://fbellelli.github.io/Countries/reference/country_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert and translate country names — country_name","text":"","code":"country_name(   x,   to = \"ISO3\",   fuzzy_match = TRUE,   verbose = FALSE,   simplify = TRUE,   custom_table = NULL )"},{"path":"https://fbellelli.github.io/Countries/reference/country_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert and translate country names — country_name","text":"x vector country names string containing desired naming conventions x converted (e.g. \"ISO3\", \"name_en\", \"UN_fr\", ...). list possible values click refer vignette country names vignette(\"dealing_with_names\"). Default \"ISO3\". fuzzy_match Logical value indicating whether fuzzy matching country names allowed (TRUE), exact matches allowed (FALSE). Default TRUE. verbose Logical value indicating whether function print console full report. Default FALSE. simplify Logical value. set TRUE function return vector converted names. set FALSE, function return list object containing converted vector additional details country matching process. Default TRUE. custom_table Custom conversion table used. needs data.frame object. Default NULL.","code":""},{"path":"https://fbellelli.github.io/Countries/reference/country_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert and translate country names — country_name","text":"Returns vector converted country names. multiple nomenclatures passed argument , vectors arranged data frame. simplify=FALSE, function return list object.","code":""},{"path":[]},{"path":"https://fbellelli.github.io/Countries/reference/country_name.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert and translate country names — country_name","text":"","code":"#Convert country names to a single nomenclatures: (e.g. 3-letters ISO code) country_name(x=c(\"UK\",\"Estados Unidos\",\"Zaire\",\"C#te d^ivoire\"), to= \"ISO3\") #>  #>  #> [1] \"GBR\" \"USA\" \"COD\" \"CIV\"  #When multiple arguments are provided to the - to - argument, a data frame is returned: country_name(x=c(\"UK\",\"Estados Unidos\",\"Zaire\",\"C#te d^ivoire\"), to= c(\"UN_en\",\"UN_fr\",\"ISO3\")) #>  #>  #>                                                  UN_en #> 1 United Kingdom of Great Britain and Northern Ireland #> 2                             United States of America #> 3                     Democratic Republic of the Congo #> 4                                        Côte d’Ivoire #>                                                 UN_fr ISO3 #> 1 Royaume-Uni de Grande-Bretagne et d’Irlande du Nord  GBR #> 2                               États-Unis d’Amérique  USA #> 3                    République démocratique du Congo  COD #> 4                                       Côte d’Ivoire  CIV  #This function can also be used to translate country names: (e.g. translating all to Chinese) country_name(x=c(\"UK\",\"Estados Unidos\",\"Zaire\",\"C#te d^ivoire\"), to= \"name_zh\") #>  #>  #> [1] \"<U+82F1><U+56FD>\" \"<U+7F8E><U+56FD>\" \"<U+521A><U+679C><U+6C11><U+4E3B><U+5171><U+548C><U+56FD>\" \"<U+79D1><U+7279><U+8FEA><U+74E6>\""},{"path":"https://fbellelli.github.io/Countries/reference/country_reference_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Conversion table — country_reference_list","title":"Conversion table — country_reference_list","text":"table containing country names different naming conventions","code":""},{"path":"https://fbellelli.github.io/Countries/reference/country_reference_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conversion table — country_reference_list","text":"","code":"country_reference_list"},{"path":"https://fbellelli.github.io/Countries/reference/country_reference_list.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Conversion table — country_reference_list","text":"data frame columns corresponding different country naming conventions. simple Reference name geographic unit. names column contain ASCII characters. nomenclature available countries. ISO3 3-letter country codes defined ISO standard 3166-1 alpha-3. nomenclature available territories standard (currently 249 territories). ISO2 2-letter country codes defined ISO standard 3166-1 alpha-2. nomenclature available territories standard (currently 249 territories). ISO_code Numeric country codes defined ISO standard 3166-1 numeric. country code UN's country number (M49 standard). nomenclature available territories ISO standard (currently 249 countries). UN_xx Official UN name 6 official UN languages. Arabic (UN_ar), Chinese  (UN_zh), English  (UN_en), French  (UN_fr), Spanish  (UN_es), Russian (UN_ru). nomenclature available countries M49 standard (currently 249 territories). WTO_xx Official WTO name 3 official WTO languages: English (WTO_en), French (WTO_fr), Spanish (WTO_es). nomenclature available WTO members observers (currently 189 entities). name_xx Translation ISO country names 28 different languages: Arabic (name_ar), Bulgarian (name_bg), Czech (name_cs), Danish (name_da), German (name_de), Greek (name_el), English  (name_en), Spanish  (name_es), Estonian (name_et),  Basque (name_eu),  Finnish (name_fi), French (name_fr), Hungarian (name_hu), Italian (name_it), Japponease (name_ja), Korean (name_ko), Lithuanian (name_lt), Dutch (name_nl), Norwegian (name_no), Polish (name_po), Portuguese (name_pt), Romenian (name_ro), Russian (name_ru), Slovak (name_sk), Swedish (name_sv), Thai (name_th), Ukranian (name_uk), Chinese simplified (name_zh), Chinese traditional (name_zh-tw) GTAP GTAP country region codes. Name0-20 variants country name included improve matching process","code":""},{"path":"https://fbellelli.github.io/Countries/reference/find_countrycol.html","id":null,"dir":"Reference","previous_headings":"","what":"Finds columns containing country names — find_countrycol","title":"Finds columns containing country names — find_countrycol","text":"function takes data frame argument returns column name (index) columns containing country names. purpose function, country 249 territories designated ISO standard 3166.","code":""},{"path":"https://fbellelli.github.io/Countries/reference/find_countrycol.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Finds columns containing country names — find_countrycol","text":"","code":"find_countrycol(x, return_index = FALSE)"},{"path":"https://fbellelli.github.io/Countries/reference/find_countrycol.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Finds columns containing country names — find_countrycol","text":"x data frame object return_index logical value indicating whether function return index country columns instead column names. Default FALSE.","code":""},{"path":"https://fbellelli.github.io/Countries/reference/find_countrycol.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Finds columns containing country names — find_countrycol","text":"Returns vector country names (return_index=FALSE) column indices (return_index=TRUE) columns containing country names.","code":""},{"path":[]},{"path":"https://fbellelli.github.io/Countries/reference/find_countrycol.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Finds columns containing country names — find_countrycol","text":"","code":"find_countrycol(x=data.frame(a=c(\"Brésil\",\"Tonga\",\"FRA\"), b=c(1,2,3))) #>  #>  #> [1] \"a\""},{"path":"https://fbellelli.github.io/Countries/reference/get_mode.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the mode of a vector — get_mode","title":"Get the mode of a vector — get_mode","text":"function returns mode distribution. given vector values, returns value appears frequently. function works strings, numerical mixed inputs. NA values treated distinct value.","code":""},{"path":"https://fbellelli.github.io/Countries/reference/get_mode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the mode of a vector — get_mode","text":"","code":"get_mode(x, first_only = FALSE)"},{"path":"https://fbellelli.github.io/Countries/reference/get_mode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the mode of a vector — get_mode","text":"x vector first_only Logical value indicating whether first mode returned x multiple modes (.e. multiple values highest number observations). Default FALSE.","code":""},{"path":"https://fbellelli.github.io/Countries/reference/get_mode.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the mode of a vector — get_mode","text":"Returns mode vector x","code":""},{"path":"https://fbellelli.github.io/Countries/reference/get_mode.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the mode of a vector — get_mode","text":"","code":"get_mode(c(\"a\",\"a\",2,3)) #> [1] \"a\" get_mode(c(1,1,2,3,NA,2)) #> [1] 1 2"},{"path":[]},{"path":"https://fbellelli.github.io/Countries/reference/is_country.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tests whether a string is a country name — is_country","text":"","code":"is_country(x, fuzzy_margin = 0.1, check_for = NULL)"},{"path":"https://fbellelli.github.io/Countries/reference/is_country.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tests whether a string is a country name — is_country","text":"x character vector tested (also supports UN/ISO country codes) fuzzy_margin number 0 1 indicating margin error tolerated fuzzy matching. 0 indicates exact match requested. Default 0.1 - .e. 10 check_forA vector country names narrow testing. function return TRUE string relates country vector. Default NULL. Returns logical vector indicating whether string country name  function checks whether string country name. supports different languages naming conventions. function returns TRUE relates one 249 countries ISO standard 3166. Alternatively, argument check_for allows narrow test subset countries. Fuzzy matching can used allow small margin error string.  #Detect strings country names is_country(x=c(\"ITA\",\"Estados Unidos\",\"Estado Unidos\",\"bungalow\",\"dog\",542), fuzzy_margin=0) is_country(x=c(\"ITA\",\"Estados Unidos\",\"Estado Unidos\",\"bungalow\",\"dog\",542), fuzzy_margin=0.1)#Checking specific subset countries is_country(x=c(\"Ceylon\",\"LKA\",\"Indonesia\",\"Inde\"), check_for=c(\"India\",\"Sri Lanka\"))  match_table country_name find_countrycol","code":""},{"path":"https://fbellelli.github.io/Countries/reference/match_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a conversion table for country names — match_table","title":"Create a conversion table for country names — match_table","text":"function returns conversion table country names desired naming conventions languages. use fuzzy matching allows flexibility recognising identifying country names.","code":""},{"path":"https://fbellelli.github.io/Countries/reference/match_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a conversion table for country names — match_table","text":"","code":"match_table(   x,   to = c(\"simple\", \"ISO3\"),   fuzzy_match = TRUE,   verbose = FALSE,   matching_info = FALSE,   simplify = TRUE,   custom_table = NULL )"},{"path":"https://fbellelli.github.io/Countries/reference/match_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a conversion table for country names — match_table","text":"x vector country names vector containing one desired naming conventions x converted (e.g. \"ISO3\", \"name_en\", \"UN_fr\", ...). list possible values click refer vignette country names vignette(\"dealing_with_names\"). Default c(\"simple\", \"ISO3\"). fuzzy_match Logical value indicating whether fuzzy matching country names allowed (TRUE), exact matches allowed (FALSE). Default TRUE. verbose Logical value indicating whether function print console report matching process. Default FALSE. matching_info Logical value. set true output match table include additional information matching x's entries. Default FALSE. simplify Logical value. set TRUE function return match table data.frame object. set FALSE, function return list object containing match table additional details country matching process. Default TRUE. custom_table Custom conversion table used. needs data.frame object. Default NULL.","code":""},{"path":"https://fbellelli.github.io/Countries/reference/match_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a conversion table for country names — match_table","text":"Returns conversion table countries names desired naming conventions. simplify=FALSE returns list object.","code":""},{"path":[]},{"path":"https://fbellelli.github.io/Countries/reference/match_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a conversion table for country names — match_table","text":"","code":"match_table(x=c(\"UK\",\"Estados Unidos\",\"Zaire\",\"C#te d^ivoire\"), to= c(\"UN_en\",\"ISO3\")) #>  #>  #>   list_countries                                                UN_en ISO3 #> 1  C#te d^ivoire                                        Côte d’Ivoire  CIV #> 2 Estados Unidos                             United States of America  USA #> 3             UK United Kingdom of Great Britain and Northern Ireland  GBR #> 4          Zaire                     Democratic Republic of the Congo  COD"},{"path":"https://fbellelli.github.io/Countries/news/index.html","id":"countries-02","dir":"Changelog","previous_headings":"","what":"Countries 0.2","title":"Countries 0.2","text":"Added function is_country() test whether string country name related list countries names Added function find_countrycol() identify columns containing country names data frame","code":""},{"path":"https://fbellelli.github.io/Countries/news/index.html","id":"countries-01","dir":"Changelog","previous_headings":"","what":"Countries 0.1","title":"Countries 0.1","text":"Function country_name() converting translating country names based fuzzy matching approach Function match_table() easily construct conversion tables help fuzzy matching Function get_mode() returns mode vectors (frequent observation) Dataset country_reference_list containing country names different languages naming conventions Added vignettes documentation Created website package","code":""}]
